<?php

/*
 * This file is part of the reportPlugin package.
 * (c) 2011-2012 Juan Manuel Fernandez <juanmf@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * This is an implementation of the Composite pattern that hanldes Step 2 of a 
 * three Steps Process for report Generation.
 * 
 * The process consists of the following steps:
 * <ol> 
 * <li>Step 1 consists in generating the XML bsaed raw data for the report. <b>RawXMLData</b></li>
 * <li>Step 2 consists in merging this raw data with a XSL-FO template to give it
 * the presentation information. XSL-FO acts as an intermediate language used 
 * to render the final reportin any format with a last transformation. <b>XSL-FO</b></li>
 * <li>Step 3 consists on rendering the XSL-FO representtion (the intermediate 
 * language) of the report to the desired output fromat. <b>FinalReport</b></li></ol>
 *  
 * This is the Base class of the Composite pattern that implements the <i>Tree 
 * of XSLT stylesheets</i> that is responsible for merging the RawXMLData generated 
 * in Step 1, with Style information represented by XSL-FO (XSL Formated Objects).
 * 
 * The tree can easily consist of only the root XSLT Stylesheet, for monolitic 
 * reports (easiest). But can also acomodate a tree structure of any complexity, 
 * that enables you to reuse Stylesheets among several reports, i.e. you could 
 * reuse the header/footer XSLT stylesheets while changing the body of similar reports.
 *
 * Each Stylesheet should know nothing about the others. You link them using both:
 * <ol>
 *  <li>An XML Tag <b><child_view name="ChildName"/></b> in the parent Stylesheet, 
 * located where you want the rendered Child Stylesheet positioned. This tag will be 
 * replaced by the rendered child Stylesheet.</li>
 *  <li>A <i>children</i> key in the config yml file, which contains an array 
 * of child stylesheets which keys must match the <b>name</b> attr in 
 * <b><child_view name="ChildName"/></b> as described below.</li></ol>
 * 
 * In the <b>config/sfExportConfig.yml</b> config file the <i>layout</i> key, inside 
 * <i>step2</i> key of any report definition. <i>layout</i> can have a tree hierarchy 
 * structure if you use the optional <i>children</i> key which assocaites the parent 
 * Stylesheet with the children Stylesheets:
 * <pre>
 * %sf_app_module_dir%/export/config/sfExportConfig.yml:
 * ...
 * .Step2:
 * .   structure:
 * .     default:
 * .       layout:
 * .         class: ~ # defaults to sfExportGlobals[globals][step2][structure_class][parent]
 * .                  # if have childs, sfExportGlobals[globals][step2][structure_class][leaf] other wise.
 * .         nodes: '/root' # A XPath expresion selecting logical_screen nodes for this view.
 * .         xslt_structure: {sheet: '', param: ''} // Step2 1st transformation
 * .         xslt_style:  {sheet: '', param: ''} // Step2 2nd transformation, optional
 * .         children:
 * .           persona_list_body: # This key must match the name attr of a <child_view name=""/> tag in parent.
 * .             class: ~ # defaults to sfExportGlobals[globals][step2][structure_class][parent]
 * .                      # if have childs, sfExportGlobals[globals][step2][structure_class][leaf] other wise.
 * .             nodes: '/root' # A XPath expresion selecting logical_screen nodes for this view.
 * .             xslt_structure: {sheet: '', param: ''} // Step2 1st transformation
 * .             xslt_style:  {sheet: '', param: ''} // Step2 2nd transformation, optional
 * </pre>
 * 
 * In the Recursive Step2 render process the Root stylesheet first calls it's 
 * child Stylesheets which in turn does the same. Then, when all child are rendered
 * the Stylesheet's <b><child_view name="ChildName"/></b> Tags get replaced by the
 * XSL-FO part generated by <b>"ChildName"</b> Stylesheet. The result being the 
 * complete XSL-FO representation of the report, delivered by Step2.
 * 
 * @author Juan Manuel Fernandez <juanmf@gmail.com>
 * @see    %sf_plugins_dir%/reportPlugin/config/sfExportConfig.yml
 * @see    CompositeView::Render()
 */
abstract class BasicView
{
    /**
     * Holds a reference to the SXLTProcessor to parse the sheets.
     * @var XSLTProcessor
     */
    protected static $_xsltProcessor = null;
    
    /**
     * Holds a reference to the DOMXPath used to search/replace childNodes.
     * @var DOMXPath
     */
    protected static $_xPath = null;

    /**
     * Holds a reference to the DOMDocument rendered by this View.
     * @var DOMDocument
     */
    protected $_renderedDom = null;

    /**
     * Holds a reference to a style xslt.
     * @var SimpleXMLElement
     */
    protected $_style = null;
    
    /**
     * Holds a reference to a structure style xslt.
     * @var SimpleXMLElement
     */
    protected $_styleParams = array();

    /**
     * Holds a reference to a structure style xslt.
     * @var SimpleXMLElement
     */
    protected $_structure = null;

    /**
     * Holds a reference to a structure style xslt.
     * @var SimpleXMLElement
     */
    protected $_structureParams = array();

    /**
     * The branch of the Logical Screen that this view has to render.
     * @var DOMDocument
     */
    protected $_logicalScreenBranch = null;

    /**
     * Holds a reference to the parent View.
     * @var BasicView
     */
    public $parent = null;

    /**
     * Initializes this Class' XSLTProcessor, if not yet instantiated.
     */
    public function __construct()
    {
        if (null === self::$_xsltProcessor) {
            self::$_xsltProcessor = new XSLTProcessor();
            self::$_xsltProcessor->registerPHPFunctions();
        }
    }

    /**
     * Style Stylesheet accessor. The style Stylesheet is the optional 
     * transformation in Step2. Usefull for adding minor style changes to the XSL-FO
     * generated by the structure Styesheet.
     * 
     * @return SimpleXMLElement 
     */
    public function getStyle()
    {
        return $this->_style;
    }

    /**
     * Style Stylesheet mutator. The style Stylesheet is the optional 
     * transformation in Step2. Usefull for adding minor style changes to the XSL-FO
     * generated by the structure Styesheet.
     * 
     * @param SimpleXMLElement|String $xml The XSLT stylesheet that applies to a
     * known XSL-FO structure, and adds more style to it.
     * 
     * @return void 
     */
    public function setStyle($xml)
    {
        if (!empty($xml) && is_string($xml)) {
            $this->_style = file_exists($xml)
                          ? simplexml_load_file($xml)
                          : simplexml_load_string($xml);
        } elseif ($xml instanceof SimpleXMLElement) {
            $this->_style = $xml;
        }
    }

    /**
     * Access this View's Rendered Dom
     * 
     * @see BasicView::_renderedDom
     * @return DOMDocument The result of processing this View's Stylesheet. 
     */
    public function getRenderedDom()
    {
        return $this->_renderedDom;
    }

    /**
     * Structure Stylesheet accessor. The structure Stylesheet is the mandatory 
     * transformation in Step2. This Stylesheet could also contain all XSL-FO 
     * stylish information, that makes style Stylesheet optional.
     * 
     * @see BasivView::getStyle()
     * @return SimpleXMLElement 
     */
    public function getStructure()
    {
        return $this->_structure;
    }

    /**
     * Structure Stylesheet mutator. The Structure Stylesheet is the mandatory 
     * transformation in Step2. This Stylesheet could also contain all XSL-FO 
     * stylish information, that makes style Stylesheet optional.
     * 
     * @param SimpleXMLElement|String $xml The XSLT stylesheet that applies XSL-FO 
     * structure to the know RawXMLData generated in Step 1.
     * 
     * @see BasicView, BasicView::getLogicalView(), LogicalScreenCallbacks
     * @return void 
     */
    public function setStructure($xml)
    {
        if (!empty($xml) && is_string($xml)) {
            $this->_structure = file_exists($xml) 
                              ? simplexml_load_file($xml)
                              : simplexml_load_string($xml);
        } elseif ($xml instanceof SimpleXMLElement) {
            $this->_structure = $xml;
        }
    }

    /**
     * Returns the LogicalScreen or RawXMLData generated in step 1 of the report 
     * generation process. LogicalScreen is described in <i>Two Steps View </i>Design
     * Pattern.
     * 
     * The LogicalScreen or RawXMLData is any XML document, or part of it, with 
     * data that must be distributed in the XSL-FO Report. and it's structure must 
     * be known by this View's Structure XSLT Stylesheet. 
     * 
     * If we are working with a splited Report, ergo, with a tree hierarchy of 
     * Stylesheets, the LogicalView is actually a branch or set of nodes extracted
     * from the Originally generated RawXMLData, using XPath, so the Stylesheet's 
     * XPath selectors should know that and be relative to the branch root. There 
     * should be a correspondance between the RawXMLData branch (this view's logical 
     * Screen) and this View's structure XSLT that must handle it.
     * 
     * @see BasicView, LogicalScreenCallbacks, LayoutManager::render()
     * @return void 
     */
    public function getLogicalView()
    {
        return $this->_logicalScreenBranch;
    }

    /**
     * Sets the LogicalScreen or RawXMLData generated in step 1 of the report 
     * generation process. LogicalScreen is described in <i>Two Steps View </i>Design
     * Pattern.
     * 
     * The LogicalScreen or RawXMLData is any XML document, or part of it, with 
     * data that must be distributed in the XSL-FO Report. and it's structure must 
     * be known by this View's Structure XSLT Stylesheet. 
     * 
     * If we are working with a splited Report, ergo, with a tree hierarchy of 
     * Stylesheets, the LogicalView is actually a branch or set of nodes extracted
     * from the Originally generated RawXMLData, using XPath, so the Stylesheet's 
     * XPath selectors should know that and be relative to the branch root. There 
     * should be a correspondance between the RawXMLData branch (this view's logical 
     * Screen) and this View's structure XSLT that must handle it.
     * 
     * @param DOMDocument|String $xml The raw XML data which structure must be 
     * handled by this View's structure Stylesheet. This data feeds the part of 
     * the report represented by this View's structure XSLT Styleheet.
     * 
     * @see BasicView, LogicalScreenCallbacks, LayoutManager::render()
     * @return void
     */
    public function setLogicalView($xml)
    {
        if (!empty($xml) && is_string($xml)) {
            (null === $this->_logicalScreenBranch) 
                && $this->_logicalScreenBranch = new DOMDocument();
            $this->_logicalScreenBranch->loadXML($xml);
        } elseif ($xml instanceof DOMDocument) {
            $this->_logicalScreenBranch = $xml;
        } else {
            throw new InvalidArgumentException('Not a DomDocument');
        }
    }

    /**
     * This is the interface method of the composite pattern, that enable 
     * CompositeView to create a collection of Child Views.
     * 
     * @param string    $name The child View's name. As described in this class'
     * DocBlock. <b><child_view name="ChildName"/></b>.
     * @param BasicView $view The Child BasicView object.
     * 
     * @see BasicView, CompositeView::addView(), LayoutManager::_makeCompositeView()
     * @return void
     */
    public abstract function addView($name, BasicView $view);

    /**
     * Removes a Child BasicView object.
     * 
     * This is the interface method of the composite pattern, that enable 
     * CompositeView to create a collection of Child Views.
     * 
     * @param string $name The child View's name. As described in this class'
     * DocBlock. <b><child_view name="ChildName"/></b>.
     * 
     * @see CompositeView::removeView(), BasicView::addView()
     * 
     * @return void
     */
    public abstract function removeView($name);

    /**
     * Returns a Child BasicView object by name.
     * 
     * This is the interface method of the composite pattern, that enable 
     * CompositeView to create a collection of Child Views.
     * 
     * @param string $name The child View's name. As described in this class'
     * DocBlock. <b><child_view name="ChildName"/></b>.
     * 
     * @return BasicView The ChildView with name $name
     */
    public abstract function getChildView($name);

    /**
     * Returns this BasicView's parent BasicView Object, if any.
     * 
     * @return BasicView The parent basicView Object or null. 
     */
    public function getParentView() 
    {
        return $this->parent;
    }

    /**
     * Sends parameters to Structure Stylesheet, if any.
     * 
     * Paraeters for this Stylesheet are defined in config file.
     * 
     * @see BasicView 
     * @return void
     */
    private function _applyStructureParams() 
    {
        if (null !== self::$_xsltProcessor && ! empty($this->_structure)) {
            self::$_xsltProcessor->setParameter('', $this->_structureParams);
        }
    }

    /**
     * Sends parameters to Style Stylesheet, if any.
     * 
     * Paraeters for this Stylesheet are defined in config file.
     * 
     * @see BasicView 
     * @return void
     */
    private function _applyStyleParams() 
    {
        if (null !== self::$_xsltProcessor && ! empty($this->_style)) {
            self::$_xsltProcessor->setParameter('', $this->_styleParams);
        }
    }

    /**
     * Sets parameters to Structure Stylesheet, if any.
     * 
     * Paraeters for this Stylesheet are defined in config file.
     * 
     * @param array $params The params
     * 
     * @see BasicView 
     * @return void
     */
    public function setStructureParams(array $params) 
    {
        $this->_structureParams = $params;
    }

    /**
     * Sets parameters to Style Stylesheet, if any.
     * 
     * Paraeters for this Stylesheet are defined in config file.
     * 
     * @param array $params The params
     * 
     * @see BasicView 
     * @return void
     */
    public function setStyleParams(array $params) 
    {
        $this->_styleParams = $params;
    }

    /**
     * Returns a DOMDocument with this view's processed structure and Style 
     * Stylesheets, the result is expected to be an XSL-FO document portion, if
     * we are using <i>children</i> nodes in config i.e. a tree hierarchy report 
     * defnition, or a complete XSL-FO document of we ar not ussing children in 
     * config, i.e. this is a monolitic report.
     * 
     * @see BasicView::_renderedDom
     * @return DOMDocument
     */
    public function render() 
    {
        // Renders this view's $_structure xsl separately from this view's childs.
        $structTran = $this->_logicalScreenBranch;
        // die(var_dump($structTran->saveXML()));
        if (null !== $this->_structure) {
            self::$_xsltProcessor->importStylesheet($this->_structure);
            $this->_applyStructureParams();
            $structTran = self::$_xsltProcessor->transformToDoc($this->_logicalScreenBranch);
        }
        if (null !== $this->_style) {
            self::$_xsltProcessor->importStylesheet($this->_style);
            $this->_applyStyleParams();
            $structTran = self::$_xsltProcessor->transformToDoc($structTran);
        }
        $this->_renderedDom = $structTran;
        return $this->_renderedDom;
    }
}
